print("–ö–æ–¥ –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è")  # –æ—Ç–ª–∞–¥–∫–∞ —É—Ä–æ–≤–Ω—è 1

import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, FSInputFile, InputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from PIL import Image, ImageOps
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")
FRAME_PATH = "templates/frame.png"  # —Ä–∞–º–∫–∞ (PNG —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é)
DB_PATH = "posts.db"

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–°—Ç–∞—Ä—Ç" ===
start_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–°—Ç–∞—Ä—Ç")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# === FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class PostForm(StatesGroup):
    waiting_for_photo = State()
    waiting_for_job_type = State()
    waiting_for_key_type = State()
    waiting_for_car = State()
    waiting_for_description = State()  # –î–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç
    waiting_for_price = State()        # –î–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã
    waiting_for_location = State()

# === –ö–ù–û–ü–ö–ò –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã –∏ –ª–æ–∫–∞—Ü–∏–∏ ===
job_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–†–µ–º–æ–Ω—Ç"), KeyboardButton(text="–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

locations = {
    "–ó–∞–≥–æ—Ä–æ–¥–Ω–æ–µ —à–æ—Å—Å–µ 36/1 –¢–¶ –õ–ï–ù–¢–ê": "46-80-99",
    "–†–æ–∫–æ—Å—Å–æ–≤—Å–∫–æ–≥–æ 2 –¢–¶ –õ–ï–ù–¢–ê": "45-52-04",
    "–ß–∫–∞–ª–æ–≤–∞ 51 –¢–¶ –õ–ï–ù–¢–ê": "95-77-71",
    "–ß–∏—á–µ—Ä–∏–Ω–∞ 2 –¢–¶ –õ–Æ–ë–ò–ú–´–ô": "94-05-60"
}

location_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text=addr)] for addr in locations.keys()],
    resize_keyboard=True,
    one_time_keyboard=True
)

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ===
print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")  # –æ—Ç–ª–∞–¥–∫–∞ —É—Ä–æ–≤–Ω—è 2
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    print("–°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")  # –æ—Ç–ª–∞–¥–∫–∞ —É—Ä–æ–≤–Ω—è 3
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            photo_path TEXT,
            job_type TEXT,
            key_type TEXT,
            car TEXT,
            description TEXT,
            price TEXT,
            location TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    conn.commit()
    conn.close()

init_db()

# === –•–≠–ù–î–õ–ï–†–´ ===

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ‚Äì —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞.
@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(PostForm.waiting_for_photo)
    await message.answer(
        "üì∏ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ç–æ:\n"
        "‚úÖ –°–Ω–∏–º–∞–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ (–∞–ª—å–±–æ–º–Ω—ã–π —Ä–µ–∂–∏–º)\n"
        "‚úÖ –í–∫–ª—é—á–∏ —Å–µ—Ç–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–º–µ—Ä—ã\n"
        "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π 1x –∑—É–º (—à–∏—Ä–æ–∫–æ—É–≥–æ–ª—å–Ω—ã–π)\n"
        "‚úÖ –ó–∞–ø–æ–ª–Ω—è–π –∫–∞–¥—Ä ‚Äî –æ–±—ä–µ–∫—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –±–µ–∑ –ø—É—Å—Ç–æ—Ç\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ—Å—Ç–∞."
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç". –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç "–°—Ç–∞—Ä—Ç", —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å.
@router.message(lambda message: message.text and message.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_button_handler(message: Message, state: FSMContext):
    await state.clear()
    await cmd_start(message, state)

# (–î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª—ë–Ω,
# —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ FSM-—Ö–µ–Ω–¥–ª–µ—Ä—ã.)

@router.message(PostForm.waiting_for_photo, F.photo | F.video)
async def handle_media(message: Message, state: FSMContext):
    try:
        if message.photo:
            file = await bot.get_file(message.photo[-1].file_id)
            file_path = f"user_data/{message.photo[-1].file_unique_id}.jpg"
            await asyncio.wait_for(bot.download_file(file.file_path, destination=file_path), timeout=30)
            media_type = "photo"
        elif message.video:
            if message.video.duration > 15:
                await message.answer("–í–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–Ω–æ–≤–∞.")
                return
            file = await bot.get_file(message.video.file_id)
            file_path = f"user_data/{message.video.file_unique_id}.mp4"
            await asyncio.wait_for(bot.download_file(file.file_path, destination=file_path), timeout=30)
    
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –∫–∞–∫ –∫–∞—Ä—Ç–∏–Ω–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            thumb_path = f"user_data/{message.video.file_unique_id}_thumb.jpg"
            if message.video.thumbnail:
                thumb_file = await bot.get_file(message.video.thumbnail.file_id)
                await asyncio.wait_for(bot.download_file(thumb_file.file_path, destination=thumb_path), timeout=30)
                media_type = "video"
            else:
                await message.answer("–í–∏–¥–µ–æ –±–µ–∑ –ø—Ä–µ–≤—å—é –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü—Ä–∏–∫—Ä–µ–ø–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ —Å –æ–±–ª–æ–∂–∫–æ–π.")
                return
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ")
            return
    
        await state.update_data(media_path=file_path, media_type=media_type,
                                  thumb_path=thumb_path if message.video else None)
        await state.set_state(PostForm.waiting_for_job_type)
        await message.answer("–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:", reply_markup=job_kb)
    except asyncio.TimeoutError:
        await message.answer("–û—à–∏–±–∫–∞: –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        print("–û—à–∏–±–∫–∞ –≤ handle_media:", e)
    
@router.message(PostForm.waiting_for_job_type)
async def handle_job_type(message: Message, state: FSMContext):
    await state.update_data(job_type=message.text)
    await state.set_state(PostForm.waiting_for_key_type)
    await message.answer("–ö–∞–∫–æ–π —Ç–∏–ø –∫–ª—é—á–∞? (–ù–∞–ø—Ä–∏–º–µ—Ä: –≤—ã–∫–∏–¥–Ω–æ–π, —á–∏–ø, —Å–º–∞—Ä—Ç)")

@router.message(PostForm.waiting_for_key_type)
async def handle_key_type(message: Message, state: FSMContext):
    await state.update_data(key_type=message.text)
    await state.set_state(PostForm.waiting_for_car)
    await message.answer("–£–∫–∞–∂–∏ –º–∞—Ä–∫—É –∞–≤—Ç–æ")

@router.message(PostForm.waiting_for_car)
async def handle_car(message: Message, state: FSMContext):
    await state.update_data(car=message.text)
    await state.set_state(PostForm.waiting_for_description)
    await message.answer("–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏, –∫–∞–∫–∏–µ —Ä–∞–±–æ—Ç—ã –±—ã–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ, –∑–∞–º–µ–Ω–∞ –∫–æ—Ä–ø—É—Å–∞, –ø–µ—Ä–µ–ø–∞–π–∫–∞ –∏ —Ç.–ø.)")

@router.message(PostForm.waiting_for_description)
async def handle_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(PostForm.waiting_for_price)
    await message.answer("–£–∫–∞–∂–∏ —Ü–µ–Ω—É —Ä–∞–±–æ—Ç—ã")

@router.message(PostForm.waiting_for_price)
async def handle_price(message: Message, state: FSMContext):
    await state.update_data(price=message.text)
    await state.set_state(PostForm.waiting_for_location)
    await message.answer("–ì–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞?", reply_markup=location_kb)

@router.message(PostForm.waiting_for_location)
async def handle_location(message: Message, state: FSMContext):
    data = await state.get_data()
    media_path = data['media_path']
    media_type = data['media_type']
    thumb_path = data.get('thumb_path')
    job_type = data['job_type']
    key_type = data['key_type']
    car = data['car']
    description = data['description']
    price = data['price']
    location = message.text
    phone = locations.get(location, "")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–æ–∂–∫–∏ —Å —Ä–∞–º–∫–æ–π (–µ—Å–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ)
    if media_type == "photo":
        image = Image.open(media_path).convert("RGBA")
    else:
        image = Image.open(thumb_path).convert("RGBA")

    frame = Image.open(FRAME_PATH).convert("RGBA")
    frame_size = frame.size
    image.thumbnail((frame_size[0] - 100, frame_size[1] - 100), Image.Resampling.LANCZOS)

    bg = Image.new("RGBA", frame_size, (0, 0, 0, 0))
    offset = ((frame_size[0] - image.size[0]) // 2, (frame_size[1] - image.size[1]) // 2)
    bg.paste(image, offset)
    combined = Image.alpha_composite(bg, frame)

    final_image_path = media_path.replace(".jpg", "_framed.png").replace(".mp4", "_thumb.png")
    combined.save(final_image_path)

    caption = (
        f"üîß –†–∞–±–æ—Ç–∞: {job_type}\n"
        f"üóùÔ∏è –ö–ª—é—á: {key_type}\n"
        f"üöò –ê–≤—Ç–æ: {car}\n"
        f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"üí∞ –¶–µ–Ω–∞: {price}\n"
        f"üìç {location}\n"
        f"üìû –¢–µ–ª.: {phone}"
    )

    if media_type == "photo":
        await bot.send_photo(chat_id=CHANNEL_ID, photo=FSInputFile(final_image_path), caption=caption)
    else:
        video_file = FSInputFile(media_path)
        thumb_file = FSInputFile(final_image_path)
        await bot.send_video(chat_id=CHANNEL_ID, video=video_file, caption=caption, thumbnail=thumb_file)

    await message.answer("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª ‚úÖ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ, –≤–∫–ª—é—á–∞—è –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("""
        INSERT INTO posts (photo_path, job_type, key_type, car, description, price, location)
        VALUES (?, ?, ?, ?, ?, ?, ?)
    """, (final_image_path, job_type, key_type, car, description, price, location))
    conn.commit()
    conn.close()

    await state.clear()

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    os.makedirs("user_data", exist_ok=True)
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ä—Ç'")
    asyncio.run(dp.start_polling(bot))
